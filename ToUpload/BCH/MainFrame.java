/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BCH;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Set;

/**
 *
 * @author benja
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clearText_btn = new javax.swing.JButton();
        generatefourDigits_btn = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField2 = new javax.swing.JTextField();
        calcErrorsBCH_btn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        clearText_btn.setText("Clear");
        clearText_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearText_btnActionPerformed(evt);
            }
        });

        generatefourDigits_btn.setText("Generate 4 digits");
        generatefourDigits_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatefourDigits_btnActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        calcErrorsBCH_btn.setText("Calculate Errors in BCH");
        calcErrorsBCH_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calcErrorsBCH_btnActionPerformed(evt);
            }
        });

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jLabel1.setText("Generate 4 digits of BCH (10,6)");

        jLabel2.setText("Calculate Errors in BCH  (10,6)");

        jLabel3.setText("Input");

        jLabel4.setText("Input");

        jLabel5.setText("Output");

        jLabel6.setText("Output");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4))
                            .addComponent(jLabel5)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel6)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clearText_btn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(generatefourDigits_btn))
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(calcErrorsBCH_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearText_btn)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(generatefourDigits_btn)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(calcErrorsBCH_btn)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /*
    Generates last four digits of BCH code, the first 6 digiets are taken in as a string and the last 4 are generated from them
    outputs by printing out new 10 digit BCH code
    Returns void
    */
    public void BCHgen4(ArrayList<Integer> number){
        //Next 4 lines calculates missing 4 digits
        number.add((4*number.get(0)+10*number.get(1)+9*number.get(2)+2*number.get(3)+number.get(4)+7*number.get(5)) % 11);
        number.add((7*number.get(0)+8*number.get(1)+7*number.get(2)+number.get(3)+9*number.get(4)+6*number.get(5)) % 11); 
        number.add((9*number.get(0)+number.get(1)+7*number.get(2)+8*number.get(3)+7*number.get(4)+7*number.get(5)) % 11 );
	number.add((number.get(0)+2*number.get(1)+9*number.get(2)+10*number.get(3)+4*number.get(4)+number.get(5)) % 11);
        
        if(number.get(6) == 10 || number.get(7) == 10 || number.get(8) == 10 || number.get(9) == 10){// Checks to see if generated 4 digits are usable, they are usable if they are bellow 10
            jTextArea1.setText("Unusable Number");
        }else{//If digits are useable append them to the bch code and output
            String finalAnswer = "";
            for (int i = 0; i < number.size(); i++){
                finalAnswer = finalAnswer + number.get(i).toString();
            }
            jTextArea1.setText(finalAnswer);
        }
    }
     /*
    Function takes in a int as input and determines if it is less than zero, if it is it adds 11 to that number
    returns new number as an int, changed if less than zero, unchanged if not.
    */
    public int lessThanZero(int number){// If the number is less than zero, add 11
        if (number < 0){
            number = number + 11;
        }
        return number;
    }
    /*
    Function takes in a int as input and gives the inverse of that number
    returns the inverse of the given number as an int
    */
    public int inverce(int number){//Returns inverce of given number
        int[] inv = {1,6,4,3,9,2,8,7,5,10};
        if (number == 0){
            return 1;
        }else{
             return inv[number - 1];
        }
       
    }
    /*
    Function takes in a int as input and gives the square root of that number
    returns the square root of the given number as an int
    */
    public int sqroot(int number){// returns squareroot of given number
        int[] srt = {1,-1,5,2,4,-1,-1,-1,3,-1};
        if(number == 0){
            return 0;
        }else{
            return srt[number - 1];
        }
    }
    
    /*
    Checks BCH(10,6) code to see if it has any errors, either one, two or more, if it has one or two errors they are corrected
    Outputed corrected BCH code is outputed to user interface, if no corrections are needed, the user is notified and also if the errors cant be corrected.
    returns void
    */
    public void errorCheckBCH(ArrayList<Integer> number){
        //Generates 4 syndromes using digits of BCH code 
        int s1 = (number.get(0)+number.get(1)+number.get(2)+number.get(3)+number.get(4)+number.get(5)+number.get(6)+number.get(7)+number.get(8)+number.get(9)) % 11;

        int s2 = (number.get(0)+2*number.get(1)+3*number.get(2)+4*number.get(3)+5*number.get(4)+6*number.get(5)+7*number.get(6)+8*number.get(7)+9*number.get(8) +10*number.get(9)) % 11;

        int s3 = (number.get(0)+4*number.get(1)+9*number.get(2)+5*number.get(3)+3*number.get(4)+3*number.get(5)+5*number.get(6)+9*number.get(7)+4*number.get(8)+number.get(9)) % 11;

        int s4 = (number.get(0)+8*number.get(1)+5*number.get(2)+9*number.get(3)+4*number.get(4)+7*number.get(5)+2*number.get(6)+6*number.get(7)+3*number.get(8)+10*number.get(9)) % 11;

       

        //Check to see if there are any errors
        System.out.println("S " + s1 + " " + s2 + " " + s3 + " " + s4);
        if (s1 != 0 || s2 != 0 || s3 != 0 || s4 != 0 ){

            int P = ((s2 * s2) - s1 * s3) % 11;
            
            int Q = (s1 * s4 - s2 * s3) % 11;

            int R = ((s3 * s3) - s2 * s4) % 11;
            
            // Check to see if P,Q or R is less than zero
            P = lessThanZero(P);

            Q = lessThanZero(Q);

            R = lessThanZero(R);

            // Find out if error is a single or double error
            System.out.println("PQR: " + P + " " + Q + " " + R);
            if (P == 0 && Q == 0 && R == 0){// Then there is only one error

                int pos = (s2 * inverce(s1) % 11);
                if (pos == 0){// If pos = 0 then there are more than two erros and nothing can be done
                    jTextArea2.setText("More than 2 errors");
                }
                jTextArea2.setText("Single Error " + pos + " " + s1 + " ");

                number.set(pos - 1, lessThanZero( (number.get(pos - 1) - s1) ) );// Correct the error
                String finalBCH = "";
                
                for(int l = 0; l < number.size(); l++){// Create a string
                    finalBCH = finalBCH + number.get(l);
                }  
                jTextArea2.append(finalBCH);// Ouptput final BCH code with no errors
            }
           
            else {// Else there are 2 errors
                
                int answer = (((Q * Q) % 11 ) - ((4 * P * R) % 11)) % 11;
                answer = lessThanZero(answer % 11);
                int srt = sqroot(answer);// Find square root of the result of the quadratic formule
                System.out.println("srt: " + srt);
                if (srt == -1 || srt == 0){// if it is equal to -1 or 0 then there are more than 2 errors and can't continue
                  jTextArea2.setText("More than 2 errors");
                }
                else{
                 
                  int pos1A = lessThanZero( (-Q + srt) % 11);// Calculate the first possition of the error part A
                  int pos1B = lessThanZero( (2 * P) % 11);// Calculate the first possition of the error Part B
                  
                   int pos2A = lessThanZero((-Q - srt) % 11);// Calculate the second possition of the error part A
                   int pos2B = lessThanZero(((2 * P) % 11));// Calculate the second possition of the error Part B
                   
                   int pos1 = (pos1A * inverce(pos1B)) % 11;//Finish calculating the first possition 
                   int pos2 = (pos2A * inverce(pos2B)) % 11;//Finish calculating the second possition 
                    
                   int mag1 = lessThanZero((((pos1 * s1 - s2) * inverce(lessThanZero((pos1 - pos2) % 11))) % 11));//Calculate magnitued of first error
                   int mag2 = lessThanZero( ( (s1 - mag1) % 11) );//Calculate magnitued of second error
                   
                   System.out.println("POS1: " + pos1);
                   System.out.println("POS2: " + pos2);
                   
                   System.out.println("MAG1: " + mag1);
                   System.out.println("MAG2: " + mag2);
                   
                   if (pos1 == 0 || pos2 == 0){// If both pos equal 0 then there are more than 2 errors
                       jTextArea2.setText("More than 2 errors");
                   }else{
                       //Correct the two errors
                       int correction1 = lessThanZero((number.get(pos1 - 1) - mag2) % 11);// Correct error one
                       int correction2 = lessThanZero((number.get(pos2 - 1) - mag1) % 11);//Correct error two
                       
                        if (correction1 == 10 || correction2 == 10){// If either error corrections are greater than 10 then there are more than 2 errors 
                            jTextArea2.setText("More than 2 errors");
                        }else{
                             number.set(pos1 -1, correction1);// replace first error with correction
                             number.set(pos2 -1,  correction2);// replace second error with correction
                             
                             String finalBCH = "";
                             for(int l = 0; l < number.size(); l++){
                                finalBCH = finalBCH + number.get(l);
                            }
                             
                            jTextArea2.setText("Double Error: i: " + pos1 + " a: " + mag2 + " j: " + pos2 + " b: " + mag1 + " "
                            + finalBCH);
                        }
                                            
                   }
                   
                   
                }
            }          
        }else{
            jTextArea2.setText("There are no errors");
        }
    }
    /*
    Function clears text fields 
    returns void
    */
    private void clearText_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearText_btnActionPerformed
       jTextField1.setText(" ");
       jTextArea1.setText(" ");
    }//GEN-LAST:event_clearText_btnActionPerformed
    /*
    Function uses the BCHgen4 to generate 4 digites to complete a 10 digiet BCH code from a given 6 digits. Also checks user input for errors.
    returns void
   */
    private void generatefourDigits_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generatefourDigits_btnActionPerformed
        ArrayList<Integer> number = new ArrayList<Integer>();
        String inputString;
	inputString = jTextField1.getText();
        boolean validIn = true;
        ArrayList<String> alpha = new ArrayList<String>(Arrays.asList("a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"));
        //Code validates that the number has no other charicters than numbers and is of the correct length
        for (int i = 0; i < inputString.length(); i++){//Gets all digits of bch code stores them in a char array
                if (inputString.charAt(i) != "0".charAt(0) && inputString.charAt(i) != "1".charAt(0) && inputString.charAt(i) != "2".charAt(0) && inputString.charAt(i) != "3".charAt(0) &&
                inputString.charAt(i) != "4".charAt(0) && inputString.charAt(i) != "5".charAt(0) && inputString.charAt(i) != "6".charAt(0) && inputString.charAt(i) != "7".charAt(0)         
                && inputString.charAt(i) != "8".charAt(0) && inputString.charAt(i) != "9".charAt(0) 
                ){
                    System.out.println(inputString.charAt(i));
                    validIn = false;
                    jTextArea1.setText("Error: input: invalid input");
                }  
            
            if(validIn == false){
                break;
            }else{
                number.add(Integer.parseInt(String.valueOf(inputString.charAt(i)))); 
            }   
        }
        
        if(number.size() > 6 || number.size() < 6 && validIn == true){
            jTextArea1.setText("Error: input: too many numbers/Too few numbers");
        }else if(number.size() == 6 && validIn == true){
            BCHgen4(number);//If all checks pass then calculate if valid
        } 
    }//GEN-LAST:event_generatefourDigits_btnActionPerformed
    
    /*
    Function uses the errorCheckBCH to correct errors in a given 10 digit bch code. Also checks user input for errors.
    returns void
    */
    private void calcErrorsBCH_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_calcErrorsBCH_btnActionPerformed
        
       ArrayList<Integer> number = new ArrayList<Integer>();
        String inputString;
	inputString = jTextField2.getText();
        boolean validIn = true;
        ArrayList<String> alpha = new ArrayList<String>(Arrays.asList("a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"));
        //Code validates that the number has no other charicters than numbers and is of the correct length
        for (int i = 0; i < inputString.length(); i++){//Gets all digits of bch code stores them in a char array
            
                if (inputString.charAt(i) != "0".charAt(0) && inputString.charAt(i) != "1".charAt(0) && inputString.charAt(i) != "2".charAt(0) && inputString.charAt(i) != "3".charAt(0) &&
                inputString.charAt(i) != "4".charAt(0) && inputString.charAt(i) != "5".charAt(0) && inputString.charAt(i) != "6".charAt(0) && inputString.charAt(i) != "7".charAt(0)         
                && inputString.charAt(i) != "8".charAt(0) && inputString.charAt(i) != "9".charAt(0) 
                ){
                    validIn = false;
                    jTextArea2.append("Error: input: invalid input");
                    break;
                }  
            
            if(validIn == false){
                break;
            }else{
                number.add(Integer.parseInt(String.valueOf(inputString.charAt(i)))); 
            }
        }
        if(number.size() > 10 || number.size() < 10 && validIn == true){
            jTextArea2.append("Error: input: too many numbers/Too few numbers");
        }else if(number.size() == 10 && validIn == true){
            errorCheckBCH(number);//If all checks pass then calculate if valid
        }
    }//GEN-LAST:event_calcErrorsBCH_btnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton calcErrorsBCH_btn;
    private javax.swing.JButton clearText_btn;
    private javax.swing.JButton generatefourDigits_btn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
